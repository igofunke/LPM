
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Sep 08 11:46:34 CEST 2014
//----------------------------------------------------

package sintaxis;

import java_cup.runtime.*;
import lexico.AnalizadorLexicoLPM;
import lexico.UnidadLexica;
import errores.ErrorDispatcher;
import sabstracta.*;
import tipos.*;
import java.util.Vector;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Sep 08 11:46:34 CEST 2014
  */
public class AnalizadorSintacticoImports extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoImports() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoImports(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoImports(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\006\004\000\002\006\002" +
    "\000\002\040\005\000\002\041\003\000\002\041\002\000" +
    "\002\036\003\000\002\036\005\000\002\037\003\000\002" +
    "\037\002\000\002\042\004\000\002\035\007\000\002\035" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\003\005\000\002\005\014\000\002\005\012\000" +
    "\002\007\005\000\002\023\003\000\002\023\005\000\002" +
    "\024\003\000\002\024\002\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\026\005\000\002\010\003\000" +
    "\002\014\005\000\002\014\003\000\002\015\005\000\002" +
    "\015\003\000\002\016\004\000\002\016\003\000\002\017" +
    "\005\000\002\017\005\000\002\017\003\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\003\000\002\012\005\000\002\012\005\000\002\012" +
    "\003\000\002\013\004\000\002\013\004\000\002\013\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\005\000\002\022\003\000\002" +
    "\022\003\000\002\043\006\000\002\043\003\000\002\044" +
    "\005\000\002\044\003\000\002\045\003\000\002\030\007" +
    "\000\002\027\007\000\002\027\011\000\002\031\012\000" +
    "\002\046\006\000\002\046\010\000\002\047\005\000\002" +
    "\047\002\000\002\032\004\000\002\033\007\000\002\033" +
    "\011\000\002\050\003\000\002\050\005\000\002\051\003" +
    "\000\002\051\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\010\002\ufffe\007\004\010\ufffe\001\002\000" +
    "\004\053\232\001\002\000\004\002\231\001\002\000\006" +
    "\002\ufffc\010\013\001\002\000\010\002\ufffe\007\004\010" +
    "\ufffe\001\002\000\006\002\uffff\010\uffff\001\002\000\004" +
    "\002\001\001\002\000\010\002\ufffc\010\013\036\ufffc\001" +
    "\002\000\004\053\014\001\002\000\004\034\015\001\002" +
    "\000\014\006\021\035\ufff5\046\016\047\020\053\022\001" +
    "\002\000\016\006\ufff1\010\ufff1\036\ufff1\046\ufff1\047\ufff1" +
    "\053\ufff1\001\002\000\004\053\227\001\002\000\016\006" +
    "\ufff0\010\ufff0\036\ufff0\046\ufff0\047\ufff0\053\ufff0\001\002" +
    "\000\004\034\223\001\002\000\016\006\uffef\010\uffef\036" +
    "\uffef\046\uffef\047\uffef\053\uffef\001\002\000\016\006\ufff2" +
    "\010\ufff2\036\ufff2\046\ufff2\047\ufff2\053\ufff2\001\002\000" +
    "\010\010\ufff6\035\ufff6\036\ufff6\001\002\000\004\035\031" +
    "\001\002\000\014\010\ufff8\035\ufff8\036\ufff8\037\ufff8\041" +
    "\027\001\002\000\012\006\021\046\016\047\020\053\022" +
    "\001\002\000\012\010\ufff7\035\ufff7\036\ufff7\037\ufff7\001" +
    "\002\000\020\006\021\010\ufff5\011\033\036\ufff5\046\016" +
    "\047\020\053\022\001\002\000\006\010\013\036\ufffc\001" +
    "\002\000\012\006\021\046\016\047\020\053\022\001\002" +
    "\000\016\006\021\010\ufff5\036\ufff5\046\016\047\020\053" +
    "\022\001\002\000\006\010\013\036\ufffc\001\002\000\004" +
    "\036\037\001\002\000\016\004\052\005\042\027\055\032" +
    "\057\033\060\053\050\001\002\000\010\002\uffed\010\uffed" +
    "\036\uffed\001\002\000\046\012\uffbf\013\217\017\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\034\uffbf" +
    "\035\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\001\002\000\004\034\213\001\002\000\006" +
    "\037\uffe3\041\uffe3\001\002\000\006\012\211\034\123\001" +
    "\002\000\006\037\uffea\041\207\001\002\000\006\037\uffe1" +
    "\041\uffe1\001\002\000\006\037\uffe4\041\uffe4\001\002\000" +
    "\046\012\uffbc\013\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\034\uffbc\035\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\001\002" +
    "\000\006\037\uffe2\041\uffe2\001\002\000\004\034\201\001" +
    "\002\000\006\037\uffe6\041\uffe6\001\002\000\006\037\uffe5" +
    "\041\uffe5\001\002\000\004\034\161\001\002\000\004\037" +
    "\160\001\002\000\024\014\073\015\104\016\072\034\103" +
    "\042\111\043\065\052\106\053\050\054\107\001\002\000" +
    "\004\053\062\001\002\000\046\012\uffbd\013\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\034" +
    "\uffbd\035\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\001\002\000\004\034\063\001\002\000" +
    "\026\014\073\015\104\016\072\034\103\035\uffad\042\111" +
    "\043\065\052\106\053\050\054\107\001\002\000\040\017" +
    "\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\035\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\001\002\000\022\014\073\015\104\034\103" +
    "\042\111\043\065\052\106\053\050\054\107\001\002\000" +
    "\040\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\035\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\132\045\131\001\002\000\034\017\uffd1\020\uffd1" +
    "\021\143\022\145\023\142\024\146\025\147\035\uffd1\037" +
    "\uffd1\040\144\041\uffd1\042\126\043\127\001\002\000\040" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\035\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\001\002\000\004\035\137\001\002\000" +
    "\022\014\073\015\104\034\103\042\111\043\065\052\106" +
    "\053\050\054\107\001\002\000\040\017\uffc5\020\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\035\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\001" +
    "\002\000\014\017\uffd6\020\uffd6\035\uffd6\037\uffd6\041\uffd6" +
    "\001\002\000\014\017\uffd9\020\uffd9\035\uffd9\037\uffd9\041" +
    "\uffd9\001\002\000\004\035\uffae\001\002\000\014\017\uffdb" +
    "\020\uffdb\035\uffdb\037\uffdb\041\uffdb\001\002\000\014\017" +
    "\121\020\uffdd\035\uffdd\037\uffdd\041\uffdd\001\002\000\012" +
    "\020\117\035\uffdf\037\uffdf\041\uffdf\001\002\000\042\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\034\123\035\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\001\002\000\024\014\073\015\104" +
    "\016\072\034\103\042\111\043\065\052\106\053\050\054" +
    "\107\001\002\000\040\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\035\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\001\002\000\040" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\035\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\001\002\000\042\011\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\035\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\001\002\000\042\011\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\035\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\001\002" +
    "\000\006\035\uffb0\041\113\001\002\000\022\014\073\015" +
    "\104\034\103\042\111\043\065\052\106\053\050\054\107" +
    "\001\002\000\040\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\035\uffc9\037\uffc9\040\uffc9\041\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\045\uffc9\001\002\000\024\014" +
    "\073\015\104\016\072\034\103\042\111\043\065\052\106" +
    "\053\050\054\107\001\002\000\004\035\uffaf\001\002\000" +
    "\006\020\117\035\116\001\002\000\040\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\035\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\001\002\000\024\014\073\015\104\016\072\034\103\042" +
    "\111\043\065\052\106\053\050\054\107\001\002\000\014" +
    "\017\121\020\uffde\035\uffde\037\uffde\041\uffde\001\002\000" +
    "\024\014\073\015\104\016\072\034\103\042\111\043\065" +
    "\052\106\053\050\054\107\001\002\000\014\017\uffdc\020" +
    "\uffdc\035\uffdc\037\uffdc\041\uffdc\001\002\000\022\014\073" +
    "\015\104\034\103\042\111\043\065\052\106\053\050\054" +
    "\107\001\002\000\010\035\125\042\126\043\127\001\002" +
    "\000\044\012\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\034\uffc0\035\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\001\002\000" +
    "\022\014\073\015\104\034\103\042\111\043\065\052\106" +
    "\053\050\054\107\001\002\000\022\014\073\015\104\034" +
    "\103\042\111\043\065\052\106\053\050\054\107\001\002" +
    "\000\040\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\035\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\132\045\131\001\002\000\022\014\073\015" +
    "\104\034\103\042\111\043\065\052\106\053\050\054\107" +
    "\001\002\000\022\014\073\015\104\034\103\042\111\043" +
    "\065\052\106\053\050\054\107\001\002\000\040\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\035" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\045\uffcd\001\002\000\040\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\035\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\001\002\000" +
    "\040\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\035\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\044\132\045\131\001\002\000\014\017\uffda\020\uffda" +
    "\035\uffda\037\uffda\041\uffda\001\002\000\010\037\uffb2\041" +
    "\uffb2\050\140\001\002\000\004\053\050\001\002\000\010" +
    "\034\123\037\uffb1\041\uffb1\001\002\000\022\014\073\015" +
    "\104\034\103\042\111\043\065\052\106\053\050\054\107" +
    "\001\002\000\022\014\073\015\104\034\103\042\111\043" +
    "\065\052\106\053\050\054\107\001\002\000\022\014\073" +
    "\015\104\034\103\042\111\043\065\052\106\053\050\054" +
    "\107\001\002\000\022\014\073\015\104\034\103\042\111" +
    "\043\065\052\106\053\050\054\107\001\002\000\022\014" +
    "\073\015\104\034\103\042\111\043\065\052\106\053\050" +
    "\054\107\001\002\000\022\014\073\015\104\034\103\042" +
    "\111\043\065\052\106\053\050\054\107\001\002\000\020" +
    "\017\uffd7\020\uffd7\035\uffd7\037\uffd7\041\uffd7\042\126\043" +
    "\127\001\002\000\020\017\uffd3\020\uffd3\035\uffd3\037\uffd3" +
    "\041\uffd3\042\126\043\127\001\002\000\020\017\uffd5\020" +
    "\uffd5\035\uffd5\037\uffd5\041\uffd5\042\126\043\127\001\002" +
    "\000\020\017\uffd8\020\uffd8\035\uffd8\037\uffd8\041\uffd8\042" +
    "\126\043\127\001\002\000\020\017\uffd4\020\uffd4\035\uffd4" +
    "\037\uffd4\041\uffd4\042\126\043\127\001\002\000\020\017" +
    "\uffd2\020\uffd2\035\uffd2\037\uffd2\041\uffd2\042\126\043\127" +
    "\001\002\000\040\017\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\035\uffca\037\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\001\002\000\006\037" +
    "\uffb3\041\uffb3\001\002\000\020\002\uffeb\010\uffeb\026\uffeb" +
    "\031\uffeb\036\uffeb\037\uffeb\041\uffeb\001\002\000\004\053" +
    "\050\001\002\000\006\034\123\035\163\001\002\000\004" +
    "\036\164\001\002\000\004\030\166\001\002\000\006\031" +
    "\174\037\uffb4\001\002\000\006\052\106\054\107\001\002" +
    "\000\004\011\170\001\002\000\004\036\037\001\002\000" +
    "\010\031\uffb7\037\uffb7\041\172\001\002\000\004\030\166" +
    "\001\002\000\006\031\uffb6\037\uffb6\001\002\000\004\011" +
    "\177\001\002\000\004\037\176\001\002\000\006\037\uffb8" +
    "\041\uffb8\001\002\000\004\036\037\001\002\000\004\037" +
    "\uffb5\001\002\000\024\014\073\015\104\016\072\034\103" +
    "\042\111\043\065\052\106\053\050\054\107\001\002\000" +
    "\006\020\117\035\203\001\002\000\004\036\037\001\002" +
    "\000\010\026\205\037\uffba\041\uffba\001\002\000\004\036" +
    "\037\001\002\000\006\037\uffb9\041\uffb9\001\002\000\016" +
    "\004\052\005\042\027\055\032\057\033\060\053\050\001" +
    "\002\000\004\037\uffe9\001\002\000\024\014\073\015\104" +
    "\016\072\034\103\042\111\043\065\052\106\053\050\054" +
    "\107\001\002\000\006\037\uffe0\041\uffe0\001\002\000\024" +
    "\014\073\015\104\016\072\034\103\042\111\043\065\052" +
    "\106\053\050\054\107\001\002\000\006\020\117\035\215" +
    "\001\002\000\004\036\037\001\002\000\006\037\uffbb\041" +
    "\uffbb\001\002\000\004\053\050\001\002\000\046\012\uffbe" +
    "\013\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\034\uffbe\035\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\045\uffbe\001\002\000\004\036" +
    "\037\001\002\000\010\002\uffec\010\uffec\036\uffec\001\002" +
    "\000\004\052\224\001\002\000\004\035\225\001\002\000" +
    "\012\006\021\046\016\047\020\053\022\001\002\000\016" +
    "\006\ufff3\010\ufff3\036\ufff3\046\ufff3\047\ufff3\053\ufff3\001" +
    "\002\000\014\010\ufff4\035\ufff4\036\ufff4\037\ufff4\041\ufff4" +
    "\001\002\000\006\002\ufffd\036\ufffd\001\002\000\004\002" +
    "\000\001\002\000\004\036\234\001\002\000\010\002\uffee" +
    "\007\uffee\010\uffee\001\002\000\012\006\021\046\016\047" +
    "\020\053\022\001\002\000\004\037\236\001\002\000\010" +
    "\002\ufffb\007\ufffb\010\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\010\002\004\003\006\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\011\006\010" +
    "\001\001\000\006\003\006\004\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\011\006\227\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\034\022\035" +
    "\016\036\023\037\024\042\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\034\022\035\016\036" +
    "\027\042\025\001\001\000\002\001\001\000\014\034\022" +
    "\035\016\036\023\037\031\042\025\001\001\000\006\005" +
    "\011\006\220\001\001\000\006\034\022\035\033\001\001" +
    "\000\014\034\022\035\016\036\023\037\034\042\025\001" +
    "\001\000\006\005\011\006\035\001\001\000\004\007\037" +
    "\001\001\000\030\023\055\025\044\026\052\027\053\030" +
    "\046\031\042\032\050\033\045\043\043\044\040\045\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\010" +
    "\156\011\066\012\065\013\063\014\100\015\077\016\076" +
    "\017\074\020\073\021\067\022\104\043\101\044\040\045" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\010\107\011\066\012\065\013\063\014" +
    "\100\015\077\016\076\017\074\020\073\021\067\022\104" +
    "\043\101\044\040\045\060\050\075\051\070\001\001\000" +
    "\002\001\001\000\016\013\155\021\067\022\104\043\101" +
    "\044\040\045\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\066" +
    "\012\065\013\063\017\135\020\073\021\067\022\104\043" +
    "\101\044\040\045\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\011\066\012\065\013\063\014\114\015\077\016" +
    "\076\017\074\020\073\021\067\022\104\043\101\044\040" +
    "\045\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\111\021\067\022\104\043\101\044\040\045\060\001" +
    "\001\000\002\001\001\000\040\010\107\011\066\012\065" +
    "\013\063\014\100\015\077\016\076\017\074\020\073\021" +
    "\067\022\104\043\101\044\040\045\060\050\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\011\066\012\065\013\063\015\117\016\076\017\074" +
    "\020\073\021\067\022\104\043\101\044\040\045\060\001" +
    "\001\000\002\001\001\000\030\011\066\012\065\013\063" +
    "\016\121\017\074\020\073\021\067\022\104\043\101\044" +
    "\040\045\060\001\001\000\002\001\001\000\022\011\123" +
    "\012\065\013\063\021\067\022\104\043\101\044\040\045" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\012\134\013\063\021\067\022\104\043\101\044\040\045" +
    "\060\001\001\000\020\012\127\013\063\021\067\022\104" +
    "\043\101\044\040\045\060\001\001\000\002\001\001\000" +
    "\016\013\133\021\067\022\104\043\101\044\040\045\060" +
    "\001\001\000\016\013\132\021\067\022\104\043\101\044" +
    "\040\045\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\043\140\044\040\045\060\001\001\000\002\001\001" +
    "\000\022\011\154\012\065\013\063\021\067\022\104\043" +
    "\101\044\040\045\060\001\001\000\022\011\153\012\065" +
    "\013\063\021\067\022\104\043\101\044\040\045\060\001" +
    "\001\000\022\011\152\012\065\013\063\021\067\022\104" +
    "\043\101\044\040\045\060\001\001\000\022\011\151\012" +
    "\065\013\063\021\067\022\104\043\101\044\040\045\060" +
    "\001\001\000\022\011\150\012\065\013\063\021\067\022" +
    "\104\043\101\044\040\045\060\001\001\000\022\011\147" +
    "\012\065\013\063\021\067\022\104\043\101\044\040\045" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\043\161\044\040\045\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\164\001\001\000\004" +
    "\047\174\001\001\000\004\022\166\001\001\000\002\001" +
    "\001\000\004\007\170\001\001\000\002\001\001\000\004" +
    "\046\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\177\001\001" +
    "\000\002\001\001\000\034\011\066\012\065\013\063\014" +
    "\201\015\077\016\076\017\074\020\073\021\067\022\104" +
    "\043\101\044\040\045\060\001\001\000\002\001\001\000" +
    "\004\007\203\001\001\000\002\001\001\000\004\007\205" +
    "\001\001\000\002\001\001\000\030\023\207\025\044\026" +
    "\052\027\053\030\046\031\042\032\050\033\045\043\043" +
    "\044\040\045\060\001\001\000\002\001\001\000\036\010" +
    "\211\011\066\012\065\013\063\014\100\015\077\016\076" +
    "\017\074\020\073\021\067\022\104\043\101\044\040\045" +
    "\060\001\001\000\002\001\001\000\034\011\066\012\065" +
    "\013\063\014\213\015\077\016\076\017\074\020\073\021" +
    "\067\022\104\043\101\044\040\045\060\001\001\000\002" +
    "\001\001\000\004\007\215\001\001\000\002\001\001\000" +
    "\004\045\217\001\001\000\002\001\001\000\004\007\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\034\022\035\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\232\001\001\000\002\001\001\000\012\034\022" +
    "\035\016\036\234\042\025\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoImports$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoImports$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoImports$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   analizadorLexico = (AnalizadorLexicoLPM)getScanner();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


   protected AnalizadorLexicoLPM analizadorLexico;
   public void syntax_error(Symbol unidadLexica) {
     ErrorDispatcher.getInstance().sendSyntaxError((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoImports$actions {
  private final AnalizadorSintacticoImports parser;

  /** Constructor */
  CUP$AnalizadorSintacticoImports$actions(AnalizadorSintacticoImports parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoImports$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoImports$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoImports$parser,
    java.util.Stack            CUP$AnalizadorSintacticoImports$stack,
    int                        CUP$AnalizadorSintacticoImports$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoImports$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoImports$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= SECUENCIAREG SECUENCIAFUN 
            {
              Import.Aux RESULT =null;
		Vector<Registro> _sreg = (Vector<Registro>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-1)).value;
		Vector<Funcion> _sfun = (Vector<Funcion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new Import.Aux(_sreg,_sfun); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Import.Aux start_val = (Import.Aux)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoImports$parser.done_parsing();
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SECUENCIAREG ::= REGISTRO SECUENCIAREG 
            {
              Vector<Registro> RESULT =null;
		Registro _reg = (Registro)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-1)).value;
		Vector<Registro> _sreg = (Vector<Registro>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 _sreg.add(0,_reg); RESULT=_sreg; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("SECUENCIAREG",2, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SECUENCIAREG ::= 
            {
              Vector<Registro> RESULT =null;
		 RESULT = new Vector<Registro>(); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("SECUENCIAREG",2, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SECUENCIAFUN ::= FUNCION SECUENCIAFUN 
            {
              Vector<Funcion> RESULT =null;
		Funcion _fun = (Funcion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-1)).value;
		Vector<Funcion> _sfun = (Vector<Funcion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 _sfun.add(0,_fun); RESULT=_sfun; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("SECUENCIAFUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SECUENCIAFUN ::= 
            {
              Vector<Funcion> RESULT =null;
		 RESULT = new Vector<Funcion>(); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("SECUENCIAFUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOQUEDEF ::= CA SECUENCIADEF CC 
            {
              Vector<Definicion> RESULT =null;
		Vector<Definicion> _sdef = (Vector<Definicion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-1)).value;
		 	
		RESULT = _sdef;
	 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("BLOQUEDEF",30, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLOQUEDEFOPT ::= BLOQUEDEF 
            {
              Vector<Definicion> RESULT =null;
		Vector<Definicion> _sdef = (Vector<Definicion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _sdef; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("BLOQUEDEFOPT",31, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLOQUEDEFOPT ::= 
            {
              Vector<Definicion> RESULT =null;
		 RESULT = new Vector<Definicion>(); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("BLOQUEDEFOPT",31, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SECUENCIADEF ::= DEF 
            {
              Vector<Definicion> RESULT =null;
		Definicion _def = (Definicion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new Vector<Definicion>(); RESULT.add(_def); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("SECUENCIADEF",28, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SECUENCIADEF ::= DEF COMA SECUENCIADEF 
            {
              Vector<Definicion> RESULT =null;
		Definicion _def = (Definicion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Vector<Definicion> _sdef = (Vector<Definicion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 _sdef.add(0,_def); RESULT=_sdef; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("SECUENCIADEF",28, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SECUENCIADEFOPT ::= SECUENCIADEF 
            {
              Vector<Definicion> RESULT =null;
		Vector<Definicion> _sdef = (Vector<Definicion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _sdef; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("SECUENCIADEFOPT",29, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SECUENCIADEFOPT ::= 
            {
              Vector<Definicion> RESULT =null;
		 RESULT = new Vector<Definicion>(); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("SECUENCIADEFOPT",29, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEF ::= ARRAYL IDEN 
            {
              Definicion RESULT =null;
		Tipo _array = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-1)).value;
		String _iden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 	
		RESULT = new Definicion(_iden,_array);
		RESULT.setFila(parser.analizadorLexico.fila());
	
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("DEF",32, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARRAYL ::= ARRAY PAP NP PCIERRE ARRAYL 
            {
              Tipo RESULT =null;
		String _n = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Tipo _sig = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		
		RESULT = new TipoArray(_sig,Integer.parseInt(_n));
	
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("ARRAYL",27, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARRAYL ::= TIPOF 
            {
              Tipo RESULT =null;
		Tipo _t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _t; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("ARRAYL",27, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOF ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = TipoBasico.INT; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("TIPOF",26, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPOF ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = TipoBasico.BOOL; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("TIPOF",26, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOF ::= IDEN 
            {
              Tipo RESULT =null;
		String _iden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new TipoComplejo(_iden); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("TIPOF",26, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // REGISTRO ::= REG IDEN BLOQUEDEF 
            {
              Registro RESULT =null;
		String _iden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-1)).value;
		Vector<Definicion> _defs = (Vector<Definicion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 	
		RESULT = new Registro(_iden,_defs);
		RESULT.setFila(parser.analizadorLexico.fila());
	 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("REGISTRO",1, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCION ::= FUN IDEN PAP SECUENCIADEFOPT PCIERRE DP ARRAYL SECUENCIADEFOPT SECUENCIAFUN BLOQUE 
            {
              Funcion RESULT =null;
		String _iden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-8)).value;
		Vector<Definicion> _sarg = (Vector<Definicion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-6)).value;
		Tipo _ret = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-3)).value;
		Vector<Definicion> _sdef = (Vector<Definicion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Vector<Funcion> _sfun = (Vector<Funcion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-1)).value;
		Bloque _bloque = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 	
		RESULT = new Funcion(_iden,_sarg,_ret,_sfun,_sdef,_bloque);
		RESULT.setFila(parser.analizadorLexico.fila());
	 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("FUNCION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCION ::= FUN IDEN PAP SECUENCIADEFOPT PCIERRE SECUENCIADEFOPT SECUENCIAFUN BLOQUE 
            {
              Funcion RESULT =null;
		String _iden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-6)).value;
		Vector<Definicion> _sarg = (Vector<Definicion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-4)).value;
		Vector<Definicion> _sdef = (Vector<Definicion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Vector<Funcion> _sfun = (Vector<Funcion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-1)).value;
		Bloque _bloque = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 	
		RESULT = new Funcion(_iden,_sarg,TipoBasico.VOID,_sfun,_sdef,_bloque);
		RESULT.setFila(parser.analizadorLexico.fila());
	 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("FUNCION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOQUE ::= CA SECUENCIA CC 
            {
              Bloque RESULT =null;
		Vector<Instruccion> _seq = (Vector<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-1)).value;
		 RESULT = new Bloque(_seq);
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SECUENCIA ::= INSTRUCCION 
            {
              Vector<Instruccion> RESULT =null;
		Instruccion _inst = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 
		RESULT = new Vector<Instruccion>();
		RESULT.add(_inst);
	 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("SECUENCIA",17, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SECUENCIA ::= INSTRUCCION COMA SECUENCIA 
            {
              Vector<Instruccion> RESULT =null;
		Instruccion _inst = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Vector<Instruccion> _sec = (Vector<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 
		_sec.add(0,_inst);
		RESULT = _sec; 
	
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("SECUENCIA",17, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SECUENCIAOPT ::= SECUENCIA 
            {
              Vector<Instruccion> RESULT =null;
		Vector<Instruccion> _sdef = (Vector<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _sdef; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("SECUENCIAOPT",18, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SECUENCIAOPT ::= 
            {
              Vector<Instruccion> RESULT =null;
		 RESULT = new Vector<Instruccion>(); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("SECUENCIAOPT",18, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		Instruccion _inst = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _inst; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= CONDICIONAL 
            {
              Instruccion RESULT =null;
		Instruccion _inst = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _inst; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= BUCLE 
            {
              Instruccion RESULT =null;
		Instruccion _inst = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _inst; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCION ::= CASEI 
            {
              Instruccion RESULT =null;
		Instruccion _inst = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _inst; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCION ::= RETURNI 
            {
              Instruccion RESULT =null;
		Instruccion _inst = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _inst; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTRUCCION ::= CALLI 
            {
              Instruccion RESULT =null;
		Instruccion _inst = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _inst; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGNACION ::= VAR0 ASIG EXPRESION 
            {
              Instruccion RESULT =null;
		Var _lhs = (Var)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Expresion _rhs = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new Asignacion(_lhs,_rhs);
		RESULT.setFila(parser.analizadorLexico.fila());
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= B0 
            {
              Expresion RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _exp; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // B0 ::= B0 OR B1 
            {
              Expresion RESULT =null;
		Expresion _izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Expresion _dch = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new Or(_izq,_dch); 
		RESULT.setFila(parser.analizadorLexico.fila());
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("B0",10, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // B0 ::= B1 
            {
              Expresion RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _exp; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("B0",10, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // B1 ::= B1 AND B2 
            {
              Expresion RESULT =null;
		Expresion _izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Expresion _dch = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new And(_izq,_dch);
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("B1",11, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // B1 ::= B2 
            {
              Expresion RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _exp; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("B1",11, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // B2 ::= NOT B3 
            {
              Expresion RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new Not(_exp); 
		RESULT.setFila(parser.analizadorLexico.fila());
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("B2",12, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // B2 ::= B3 
            {
              Expresion RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _exp; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("B2",12, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // B3 ::= A0 IGUAL A0 
            {
              Expresion RESULT =null;
		Expresion _izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Expresion _dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new Igual(_izq,_dcha); 
		RESULT.setFila(parser.analizadorLexico.fila());
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("B3",13, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // B3 ::= A0 DIS A0 
            {
              Expresion RESULT =null;
		Expresion _izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Expresion _dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new Distinto(_izq,_dcha); 
		RESULT.setFila(parser.analizadorLexico.fila());
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("B3",13, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // B3 ::= B4 
            {
              Expresion RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _exp; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("B3",13, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // B4 ::= A0 MENOR A0 
            {
              Expresion RESULT =null;
		Expresion _izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Expresion _dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new Menor(_izq,_dcha);
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("B4",14, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // B4 ::= A0 MI A0 
            {
              Expresion RESULT =null;
		Expresion _izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Expresion _dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new MenorIgual(_izq,_dcha); 
		RESULT.setFila(parser.analizadorLexico.fila());
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("B4",14, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // B4 ::= A0 MAYOR A0 
            {
              Expresion RESULT =null;
		Expresion _izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Expresion _dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new Mayor(_izq,_dcha); 
		RESULT.setFila(parser.analizadorLexico.fila());
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("B4",14, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // B4 ::= A0 MAI A0 
            {
              Expresion RESULT =null;
		Expresion _izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Expresion _dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new MayorIgual(_izq,_dcha);
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("B4",14, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // B4 ::= A0 
            {
              Expresion RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _exp; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("B4",14, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // A0 ::= A0 MAS A1 
            {
              Expresion RESULT =null;
		Expresion _izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Expresion _dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new Suma(_izq,_dcha);
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("A0",7, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // A0 ::= A0 MENOS A1 
            {
              Expresion RESULT =null;
		Expresion _izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Expresion _dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new Resta(_izq,_dcha);
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("A0",7, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // A0 ::= A1 
            {
              Expresion RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _exp; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("A0",7, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // A1 ::= A1 POR A2 
            {
              Expresion RESULT =null;
		Expresion _izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Expresion _dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new Multiplicacion(_izq,_dcha);
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("A1",8, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // A1 ::= A1 DIV A2 
            {
              Expresion RESULT =null;
		Expresion _izq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Expresion _dcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new Division(_izq,_dcha);
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("A1",8, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // A1 ::= A2 
            {
              Expresion RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _exp; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("A1",8, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // A2 ::= MENOS A2 
            {
              Expresion RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new OpMenos(_exp); 
		RESULT.setFila(parser.analizadorLexico.fila());
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("A2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // A2 ::= MAS A2 
            {
              Expresion RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new OpMas(_exp);
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("A2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // A2 ::= ELEM 
            {
              Expresion RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _exp; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("A2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELEM ::= NUMERO 
            {
              Expresion RESULT =null;
		Entero _num = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _num; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("ELEM",15, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ELEM ::= VAR0 
            {
              Expresion RESULT =null;
		Var _var = (Var)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _var; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("ELEM",15, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ELEM ::= TRUE 
            {
              Expresion RESULT =null;
		 RESULT = new Booleano(true);
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("ELEM",15, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ELEM ::= FALSE 
            {
              Expresion RESULT =null;
		 RESULT = new Booleano(false);
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("ELEM",15, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ELEM ::= PAP B0 PCIERRE 
            {
              Expresion RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-1)).value;
		 RESULT = _exp; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("ELEM",15, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NUMERO ::= NP 
            {
              Entero RESULT =null;
		String _n = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new Entero(Integer.parseInt(_n)); 
		RESULT.setFila(parser.analizadorLexico.fila());
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("NUMERO",16, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NUMERO ::= ENT 
            {
              Entero RESULT =null;
		String _n = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new Entero(Integer.parseInt(_n));
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("NUMERO",16, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VAR0 ::= VAR0 PAP A0 PCIERRE 
            {
              Var RESULT =null;
		Var _var = (Var)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-3)).value;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-1)).value;
		 RESULT = new ArrayItem(_var,_exp);
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("VAR0",33, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VAR0 ::= VAR1 
            {
              Var RESULT =null;
		Var _var = (Var)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _var; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("VAR0",33, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VAR1 ::= VAR1 PUNTO VAR2 
            {
              Var RESULT =null;
		Var _lhs = (Var)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Identificador _rhs = (Identificador)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new ElementoRegistro(_lhs,_rhs);
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("VAR1",34, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VAR1 ::= VAR2 
            {
              Var RESULT =null;
		Identificador _var = (Identificador)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _var; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("VAR1",34, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VAR2 ::= IDEN 
            {
              Identificador RESULT =null;
		String _iden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new Identificador(_iden); 
		RESULT.setFila(parser.analizadorLexico.fila());
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("VAR2",35, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BUCLE ::= WHILE PAP B0 PCIERRE BLOQUE 
            {
              Instruccion RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Bloque _bloque = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new While(_exp,_bloque); 
		RESULT.setFila(parser.analizadorLexico.fila());
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("BUCLE",22, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONDICIONAL ::= IF PAP B0 PCIERRE BLOQUE 
            {
              Instruccion RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Bloque _bloque = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new If(_exp,_bloque);
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",21, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONDICIONAL ::= IF PAP B0 PCIERRE BLOQUE ELSE BLOQUE 
            {
              Instruccion RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-4)).value;
		Bloque _bloqueT = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Bloque _bloqueF = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new If(_exp,_bloqueT,_bloqueF);
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",21, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CASEI ::= SWITCH PAP VAR0 PCIERRE CA SECUENCIACASE DEFAULTOPT CC 
            {
              Instruccion RESULT =null;
		Var _var = (Var)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-5)).value;
		Vector<CaseC> _casos = (Vector<CaseC>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Default _def = (Default)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-1)).value;
		 RESULT = new Switch(_var,_casos,_def); 
		RESULT.setFila(parser.analizadorLexico.fila());
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("CASEI",23, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SECUENCIACASE ::= CASE NUMERO DP BLOQUE 
            {
              Vector<CaseC> RESULT =null;
		Entero _exp = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Bloque _bloque = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 
		RESULT = new Vector<CaseC>();
		RESULT.add(0,new CaseC(_exp,_bloque)); 
	
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("SECUENCIACASE",36, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SECUENCIACASE ::= CASE NUMERO DP BLOQUE COMA SECUENCIACASE 
            {
              Vector<CaseC> RESULT =null;
		Entero _exp = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-4)).value;
		Bloque _bloque = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Vector<CaseC> _casos = (Vector<CaseC>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 
		_casos.add(0,new CaseC(_exp,_bloque));
		RESULT = _casos;
	
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("SECUENCIACASE",36, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DEFAULTOPT ::= DEFAULT DP BLOQUE 
            {
              Default RESULT =null;
		Bloque _bloque = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 
		RESULT = new Default(_bloque); 
		RESULT.setFila(parser.analizadorLexico.fila());
	
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("DEFAULTOPT",37, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DEFAULTOPT ::= 
            {
              Default RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("DEFAULTOPT",37, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RETURNI ::= RETURN EXPRESION 
            {
              Instruccion RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new Return(_exp);
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("RETURNI",24, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CALLI ::= CALL IDEN PAP SECUENCIAEXPOPT PCIERRE 
            {
              Instruccion RESULT =null;
		String _iden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-3)).value;
		Vector<Expresion> _sec = (Vector<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-1)).value;
		 RESULT = new Call(_iden,_sec);
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("CALLI",25, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CALLI ::= CALL IDEN PAP SECUENCIAEXPOPT PCIERRE FLECHA VAR0 
            {
              Instruccion RESULT =null;
		String _iden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-5)).value;
		Vector<Expresion> _sec = (Vector<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-3)).value;
		Var _var = (Var)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = new Call(_iden,_sec,_var);
		RESULT.setFila(parser.analizadorLexico.fila()); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("CALLI",25, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SECUENCIAEXP ::= EXPRESION 
            {
              Vector<Expresion> RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 
		RESULT = new Vector<Expresion>();
		RESULT.add(0,_exp);
	
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("SECUENCIAEXP",38, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SECUENCIAEXP ::= EXPRESION COMA SECUENCIAEXP 
            {
              Vector<Expresion> RESULT =null;
		Expresion _exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.elementAt(CUP$AnalizadorSintacticoImports$top-2)).value;
		Vector<Expresion> _sec = (Vector<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 
		_sec.add(0,_exp);
		RESULT = _sec;
	
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("SECUENCIAEXP",38, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SECUENCIAEXPOPT ::= SECUENCIAEXP 
            {
              Vector<Expresion> RESULT =null;
		Vector<Expresion> _seq = (Vector<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoImports$stack.peek()).value;
		 RESULT = _seq; 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("SECUENCIAEXPOPT",39, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SECUENCIAEXPOPT ::= 
            {
              Vector<Expresion> RESULT =null;
		 RESULT = new Vector<Expresion>(); 
              CUP$AnalizadorSintacticoImports$result = parser.getSymbolFactory().newSymbol("SECUENCIAEXPOPT",39, RESULT);
            }
          return CUP$AnalizadorSintacticoImports$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoImports$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoImports$do_action(
    int                        CUP$AnalizadorSintacticoImports$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoImports$parser,
    java.util.Stack            CUP$AnalizadorSintacticoImports$stack,
    int                        CUP$AnalizadorSintacticoImports$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoImports$do_action_part00000000(
                               CUP$AnalizadorSintacticoImports$act_num,
                               CUP$AnalizadorSintacticoImports$parser,
                               CUP$AnalizadorSintacticoImports$stack,
                               CUP$AnalizadorSintacticoImports$top);
    }
}

